#include <iostream>

using namespace std;

int findvertex(int* weight,bool* visited,int n){
int minvertex=-1;

  for(int i=0;i<n;i++){
    if(!visited[i] && (minvertex==-1 || weight[i]<weight[minvertex])){
        minvertex=i;
    }
  }
  return minvertex;
}
void dijiktra(int ** edges,int n){
    bool* visited=new bool[n];
    int* weight=new int[n];

    for(int i=0;i<n;i++){
        visited[i]=false;
        weight[i]=INT_MAX;
    }
    weight[0]=0;


    for(int i=0;i<n;i++){
            int minvertex=findvertex(weight,visited,n);
            visited[minvertex]=true;
            for(int j=0;j<n;j++){
                if(edges[minvertex][j]!=0 && !visited[j]){
                   int m=weight[minvertex]+edges[minvertex][j];
                if(weight[j]>m){
                   weight[j]=m;
                }
              }
            }
        }
        for(int i=0;i<n;i++){
            cout<<i<<" "<<weight[i]<<endl;
        }

    }

int main()
{
  int n,e;
  cout<<"\n enter no of vertices and edges in and graph ";
  cin>>n>>e;

  int** edges=new int*[n];

  for(int i=0;i<n;i++){
    edges[i]=new int[n];

    for(int j=0;j<n;j++){
        edges[i][j]=0;
        }
    }

    cout<<endl;
    for(int i=0;i<e;i++){
            int f,s,w;
        cin>>f>>s>>w;
        edges[f][s]=w;
        edges[s][f]=w;
        }
    cout<<endl;

    dijiktra(edges,n);

    for(int i=0;i<n;i++){
        delete[] edges[i];
    }
    delete[] edges;

    return 0;
}




output//

enter no of vertices and edges in and graph 5 7

0 1 4
0 2 8
1 3 6
1 2 2
2 3 3
2 4 9
3 4 5

0 0
1 4
2 6
3 9
4 14
