#include <bits/stdc++.h>

using namespace std;
void haspath(int** edges,int n,int sv,bool* visited){
visited[sv]=true;
for(int i=0;i<n;i++){
        if(sv==i){
            continue;
        }
        if(edges[sv][i]==1){
    if(visited[i]){
        continue;
    }
    haspath(edges,n,i,visited);
  }
 }

}
int main()
{
    int n,e;
    cin>>n;
    cin>>e;

    int** edges=new int*[n];

    for(int i=0;i<n;i++){
         edges[i]=new int[n];

    for(int j=0;j<n;j++){
        edges[i][j]=0;
    }
    }

    for(int i=0;i<e;i++){
            int f,s;
            cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }

  //  DFS(edges,n);
   // cout<<endl<<endl<<endl;
   //  BFS(edges,n);
bool* visited=new bool[n];
for(int i=0;i<n;i++){
    visited[i]=false;
}

int startv,endv;
cout<<"\n enter the starting and end vertex whose path you want to find ";
cin>>startv>>endv;

haspath(edges,n,startv,visited);

 if(visited[startv] && visited[endv]){
        cout<<"yes path is available "<<endl;
       }
    else
    {
    cout<<"no path available"<<endl;
    }

    for(int i=0;i<n;i++){
        delete[] edges[i];
    }
    delete[] edges;

    return 0;
}
